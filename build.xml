<?xml version="1.0"?>
<!--
A build.xml for Michel Fortins PHP Markdown parser.
Generates a PSR-0 compliant library, beatutifies code, runs unit tests and generates documentation.
Author: Thomas Szteliga <ts@websafe.pl>, https://github.com/websafe/
-->
<project name="websafe-michelf-markdown-parser-psr" default="user" basedir=".">

	<description>A PSR-0 compliant version of Michel Fortin's PHP Markdown. Generated by a buildscript. Based on the latest PHP Markdown extra branch.</description>

	<property file="build.properties" />

	<target name="init">
		<tstamp />
		<mkdir dir="${temp.dir}" />
		<mkdir dir="${vendor.dir}/bin" />
		<mkdir dir="${build.dir}" />
	</target>

	<target name="download-composer-installer" depends="init">
		<echo message="Downloading composer..." />
		<echo message="If something goes wrong check ${temp.dir}/composer.download.log and ${temp.dir}/composer.download.error" />
		<exec executable="php" output="${temp.dir}/composer.download.log" error="${temp.dir}/composer.download.error" failonerror="true">
			<arg value="-r" />
			<arg value="file_put_contents('${temp.dir}/install.php', file_get_contents('https://getcomposer.org/installer'));" />
		</exec>
	</target>

	<target name="install-composer" depends="download-composer-installer">
		<echo message="Installing composer..." />
		<echo message="If something goes wrong check ${temp.dir}/composer.install.log and ${temp.dir}/composer.install.error" />
		<exec executable="php" output="${temp.dir}/composer.install.log" error="${temp.dir}/composer.install.error" failonerror="true">
			<arg value="temp/install.php" />
			<arg value="--install-dir=${vendor.dir}/bin" />
		</exec>
	</target>

	<target name="cleanup-after-installing-composer" depends="install-composer">
		<echo message="Cleaning up after installing composer..." />
		<delete verbose="true">
			<fileset dir="${temp.dir}" casesensitive="yes">
				<include name="**/install.php" />
			</fileset>
		</delete>
	</target>

	<target name="update-composer" depends="cleanup-after-installing-composer">
		<echo message="Selfupdating composer..." />
		<echo message="If something goes wrong check ${temp.dir}/composer.selfupdate.log and ${temp.dir}/composer.selfupdate.error" />
		<exec executable="${vendor.dir}/bin/composer.phar" output="${temp.dir}/composer.selfupdate.log" error="${temp.dir}/composer.selfupdate.error" failonerror="true">
			<arg value="-v" />
			<arg value="selfupdate" />
		</exec>
	</target>

	<target name="update-vendors" depends="update-composer">
		<echo message="Updating vendors..." />
		<echo message="If something goes wrong check ${temp.dir}/composer.update.log and ${temp.dir}/composer.update.error" />
		<exec executable="${vendor.dir}/bin/composer.phar" output="${temp.dir}/composer.update.log" error="${temp.dir}/composer.update.error" failonerror="true">
			<arg value="-v" />
			<arg value="update" />
		</exec>
	</target>

	<target name="update-vendors-dev" depends="update-composer">
		<echo message="Updating vendors with dev..." />
		<echo message="If something goes wrong check ${temp.dir}/composer.update.log and ${temp.dir}/composer.update.error" />
		<exec executable="${vendor.dir}/bin/composer.phar" failonerror="true">
			<arg value="-v" />
			<arg value="update" />
			<arg value="--prefer-source" />
			<arg value="--dev" />
		</exec>
	</target>

	<target name="php-cs-fixer">
		<echo message="PHP-CS-fixer..." />
		<echo message="If something goes wrong check ${temp.dir}/php-cs-fixer.log and ${temp.dir}/php-cs-fixer.error" />
		<exec executable="${vendor.dir}/bin/php-cs-fixer" output="${temp.dir}/php-cs-fixer.log" error="${temp.dir}/php-cs-fixer.error" failonerror="true">
			<arg value="--verbose" />
			<arg value="fix" />
			<arg value="${src.dir}" />
			<arg value="--fixers=indentation,linefeed,trailing_spaces,unused_use,php_closing_tag,short_tag,return,visibility,braces,phpdoc_params,eof_ending,extra_empty_lines,include,psr0,controls_spaces,elseif" />
		</exec>
	</target>

	<target name="phpunit">
		<echo message="Running PHPUnit tests..." />
		<echo message="If something goes wrong check ${temp.dir}/phpunit.log and ${temp.dir}/phpunit.error" />
		<exec executable="${vendor.dir}/bin/phpunit" output="${temp.dir}/phpunit.log" error="${temp.dir}/phpunit.error" failonerror="true">
			<arg value="-v" />
			<arg value="--debug" />
			<arg value="${tests.dir}" />
		</exec>
	</target>

	<target name="phpcs">
		<echo message="CodeSniffer checks..." />
		<echo message="If something goes wrong check ${temp.dir}/codesniffer.psr-1.log and ${temp.dir}/codesniffer.psr-1.error" />
		<exec executable="${vendor.dir}/bin/phpcs" output="${temp.dir}/codesniffer.psr-1.log" error="${temp.dir}/codesniffer.psr-1.error" failonerror="false">
			<arg value="--standard=PSR1" />
			<arg value="--report=full" />
			<arg value="-w" />
			<arg value="-s" />
			<arg value="-v" />
			<arg value="--ignore=${tests.dir}/Bootstrap.php" />
			<arg value="${src.dir}" />
		</exec>
		<echo message="If something goes wrong check ${temp.dir}/codesniffer.psr-2.log and ${temp.dir}/codesniffer.psr-2.error" />
		<exec executable="${vendor.dir}/bin/phpcs" output="${temp.dir}/codesniffer.psr-2.log" error="${temp.dir}/codesniffer.psr-2.error" failonerror="false">
			<arg value="--standard=PSR2" />
			<arg value="--report=full" />
			<arg value="-w" />
			<arg value="-s" />
			<arg value="-v" />
			<arg value="--ignore=${tests.dir}/Bootstrap.php" />
			<arg value="${src.dir}" />
		</exec>
	</target>

	<target name="phpdoc">
		<echo message="Building PHP documentation..." />
		<echo message="If something goes wrong check ${temp.dir}/phpdoc.log and ${temp.dir}/phpdoc.error" />
		<exec executable="${vendor.dir}/bin/phpdoc.php" output="${temp.dir}/phpdoc.log" error="${temp.dir}/phpdoc.error" failonerror="true">
			<arg value='-d${src.dir}' />
			<arg value='-t${phpdoc.dir}' />
			<arg value='--hidden' />
			<arg value='--force' />
			<arg value='--validate' />
			<arg value='--sourcecode=on' />
			<arg value='--parseprivate' />
			<arg value='--filename=*.php' />
			<arg value='--markers=TODO,FIXME' />
			<arg value='--template=${data.dir}/templates/responsive' />
		</exec>
	</target>

	<target name="clean">
		<echo message="Cleaning up..." />
		<delete verbose="true">
			<fileset dir="build" casesensitive="yes">
				<include name="**/*.*" />
				<exclude name="**/.gitignore" />
			</fileset>
		</delete>
		<delete verbose="true" dir="data/templates" />
		<delete verbose="true" dir="docs/phpdoc" />
		<delete verbose="true" dir="library/Websafe/Michelf" />
	</target>

	<target name="distclean">
		<echo message="Distclean..." />
		<delete dir="${build.dir}" verbose="true" />
		<delete dir="${data.dir}" verbose="true" />
		<delete dir="${phpdoc.dir}" verbose="true" />
		<delete dir="${doc.dir}" verbose="true" />
		<delete dir="${temp.dir}" verbose="true" />
		<delete dir="${vendor.dir}" verbose="true" />
	    <delete verbose="true">
            <fileset dir="." casesensitive="yes">
                <include name="composer.lock" />
            </fileset>
        </delete>
	</target>
	<target name="prepare" depends="update-vendors">
	</target>
	<target name="prepare-dev" depends="update-vendors-dev">
	</target>
	<target name="fix" depends="php-cs-fixer">
	</target>
	<target name="doc" depends="phpdoc">
	</target>
	<target name="test" depends="phpunit">
	</target>
	<target name="sniff" depends="phpcs">
	</target>

	<target name="user" depends="prepare">
	</target>
	<target name="dev" depends="prepare-dev,doc,fix,test,sniff">
	</target>

</project>
